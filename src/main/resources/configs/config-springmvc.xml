<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

    <!-- ================springmvc配置自动扫描注解以及打开注解开关====================== -->
    <!--打开springmvc框架的默认配置，即使用注解的总开关-->
    <mvc:annotation-driven conversion-service="MyConvertor">
        <!-- 将ajax请求返回的结果集自动转换为json：处理 @responseBody 将action返回的数据结构转换为json类型，同时配置将数据结构中的日期类型进行处理,将json字符串中日期类型按指定格式进行格式化处理 -->
        <mvc:message-converters>
            <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                <property name="objectMapper">
                    <bean class="com.fasterxml.jackson.databind.ObjectMapper">
                        <property name="dateFormat">
                            <bean class="java.text.SimpleDateFormat">
                                <constructor-arg type="java.lang.String"
                                                 value="yyyy-MM-dd HH:mm:ss" />
                            </bean>
                        </property>
                    </bean>
                </property>
            </bean>
        </mvc:message-converters>

    </mvc:annotation-driven>

    <!-- 定义类型转换器的spring bean对象 -->
    <!--ConversionServiceFactoryBean类用于加载所有的自定义类型转换器到springmvc的框架中进行类型转换处理-->
    <bean id="MyConvertor"
          class="org.springframework.context.support.ConversionServiceFactoryBean">
        <property name="converters">
            <list>
                <bean class="com.yuw.converter.DateTypeConverter"></bean>
                <!-- 此处可以继续加入其它的自定义类型转换器类 -->
            </list>
        </property>
    </bean>

    <!-- SpringMVC框架使用的配置注解扫描的包范围 -->
    <context:component-scan base-package="com.yuw"></context:component-scan>

    <!--=========================静态资源解析处理=========================================-->
    <!--springmvc框架通过使用 mvc：resources标签可以配置静态资源的解析：
        location：表示静态资源在项目目录中的位置，  / 表示项目的webapp目录的位置（maven项目）
        mapping：表示http请求的url的中的位置， / 表示tomcat配置的web根目录，此处配置的web根目录为  http://localhost:9009/项目名/
        扩展一下：如果这样子的话，建议 映射的方法就不要使用 static 作为action映射的路径名
    -->
    <mvc:resources location="/static/" mapping="/static/**"/>

    <!--此处会提示没有 该目录，因为是用于文件上传的目录，该目录在开发环境下没有，但是在服务器部署环境下有，不影响-->
    <mvc:resources location="/uploadfiles/" mapping="/uploadfiles/**"/>
    <!--课下作业：springmvc静态资源处理方式都有哪些？  -->

    <!-- ================文件上传====================== -->
    <!-- 多部分文件上传，bean的id名是固定名字 -->
    <bean id="multipartResolver"
          class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <!-- 上传文件的大小，单位是bit -->
        <property name="maxUploadSize" value="10485760" />
        <!-- 文件上传处理器的缓存的大小 -->
        <property name="maxInMemorySize" value="4096" />
        <!-- 文件上传的默认编码处理 -->
        <property name="defaultEncoding" value="UTF-8"></property>
    </bean>


    <!--==================== 配置springmvc框架视图解析格式 ===========================-->
    <bean id="viewResolver"
          class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <!--视图解析时的路径前缀，会自动添加-->
        <property name="prefix" value="/WEB-INF/pages/"/>
        <!--视图解析时的路径后缀，会自动添加-->
        <property name="suffix" value=".jsp"/>
    </bean>
</beans>