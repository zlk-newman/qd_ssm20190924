<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

    <!-- ====================注解扫描============== -->
    <!-- Spring的IOC的管理范围：扫描所有的需要依赖注入的类的包路径范围 -->
    <context:component-scan base-package="com.yuw"></context:component-scan>

    <!--*********************************************-->
    <!--把mybatis框架托管给spring框架：使用spring框架，通过spring容器的ioc、di、aop功能，管理mybatis框架-->
    <!--*********************************************-->

    <!-- ====================加载数据库属性参数文件============== -->
    <!-- 加载数据库的属性配置文件 -->
    <bean id="propertyConfigurer"
          class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:configs/config-db.properties</value>
            </list>
        </property>
    </bean>

    <!-- ====================spring管理Druid数据源配置项============== -->
    <!-- 配置数据源，使用的是alibaba的Druid(德鲁伊)数据源 -->
    <bean id="dataSource"
          class="com.alibaba.druid.pool.DruidDataSource" init-method="init"
          destroy-method="close">
        <!-- driverClassName 属性自动根据url识别，该属性可配可不配 -->
        <property name="driverClassName" value="${driverClassName}"/>
        <property name="url" value="${url}"/>
        <property name="username" value="${username}"/>
        <property name="password" value="${password}"/>
        <!-- 初始化连接大小 -->
        <property name="initialSize" value="${initialSize}"/>
        <!-- 连接池最大使用连接数量 -->
        <property name="maxActive" value="${maxActive}"/>
        <!-- 连接池最小空闲 -->
        <property name="minIdle" value="${minIdle}"/>
        <!-- 获取连接最大等待时间 -->
        <property name="maxWait" value="${maxWait}"/>
        <!-- 连接性能检测 -->
        <property name="validationQuery" value="${validationQuery}"/>
        <property name="testOnBorrow" value="${testOnBorrow}"/>
        <property name="testOnReturn" value="${testOnReturn}"/>
        <property name="testWhileIdle" value="${testWhileIdle}"/>
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis"
                  value="${timeBetweenEvictionRunsMillis}"/>
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis"
                  value="${minEvictableIdleTimeMillis}"/>
        <!-- 打开removeAbandoned功能 -->
        <property name="removeAbandoned" value="${removeAbandoned}"/>
        <!-- 1800秒，也就是30分钟 -->
        <property name="removeAbandonedTimeout"
                  value="${removeAbandonedTimeout}"/>
        <!-- 关闭abanded连接时输出错误日志 -->
        <property name="logAbandoned" value="${logAbandoned}"/>
        <!-- 监控数据库 -->
        <property name="filters" value="${filters}"/>
    </bean>

    <!-- ====================spring管理Mybatis，Mybatis的配置由spring进行管理============== -->

    <!-- 将mybaits的sqlsessionfactory对象由spring进行管理 -->
    <bean id="sqlSessionFactory"
          class="org.mybatis.spring.SqlSessionFactoryBean">

        <!-- 实例化sqlSessionFactory时需要使用上述配置好的id=dataSource的数据源以及SQL映射文件 -->
        <!--依赖注入了数据源 DataSource的实例对象-->
        <property name="dataSource" ref="dataSource"></property>

        <!-- 在创建mybatis 的 sqlsessionfactory时，加载mybatis的主配置文件 -->

        <!-- <property name="configLocation" value="classpath:configs/config-mybatis.xml"></property> -->
        <!-- 自动扫描com/yuw/mapper/目录下的所有SQL映射的xml文件, 省掉Configuration.xml里的手工配置 这样所有的*.xml的sql映射文件就可以被自动扫描加载 -->
        <property name="mapperLocations"
                  value="classpath:com/yuw/mapper/*.xml"/>

        <!-- 配置mybatis的别名的处理：采用more能处理方式：实体类的别名，默认使用该实体类首字母小写的名字作为别名或给类名都可以。 例如：com.yuw.bean.AdminBean类的别名为adminBean -->
        <!-- typeAliasesPackage该配置表示，将包org.lanqiao.tjut.bean下所有的实体类，采用默认别名的处理方式进行处理 -->
        <property name="typeAliasesPackage" value="com.yuw.bean"></property>

        <!-- 加载mybatis其他的属性参数配置信息[mybatis配置文件中的settings节点中的属性值] -->
        <property name="configurationProperties">
            <!-- 加载其他的配置信息项 -->
            <props>
                <!-- 配置mybatis的日志输出组件：log4j -->
                <prop key="logImpl">LOG4J</prop>
                <!-- =====加载mybatis支持redis二级缓存的配置属性值====== -->
                <!-- 打开二级缓存，以便使用redis进行管理 -->
                <prop key="cacheEnabled">false</prop>
                <!-- 查询时，关闭关联对象即时加载以提高性能 -->
                <prop key="lazyLoadingEnabled">false</prop>
                <!-- 设置关联对象加载的形态，此处为按需加载字段(加载字段由SQL指定)，不会加载关联表的所有字段，以提高性能 -->
                <prop key="aggressiveLazyLoading">true</prop>
                <!-- 对于未知的SQL查询，允许返回不同的结果集以达到通用的效果 -->
                <prop key="multipleResultSetsEnabled">true</prop>
                <!-- 允许使用列标签代替列名 -->
                <prop key="useColumnLabel">true</prop>
                <!-- 允许使用自定义的主键值(比如由程序生成的UUID 32位编码作为键值)，数据表的PK生成策略将被覆盖 -->
                <!-- <prop key="useGeneratedKeys">true</prop> -->
                <!-- 给予被嵌套的resultMap以字段-属性的映射支持 -->
                <prop key="autoMappingBehavior">FULL</prop>
                <!-- 对于批量更新操作缓存SQL以提高性能 -->
                <prop key="defaultExecutorType">BATCH</prop>
                <!-- 数据库超过25000秒仍未响应则超时 -->
                <prop key="defaultStatementTimeout">25000</prop>
            </props>
        </property>
    </bean>

    <!-- 配置扫描器：扫面指定包路径下的xml文档和mapper接口对象，进行spring bean管理
            功能：扫描与xml的mapper对应的接口类在那个包路径下，
            这样，spring管理Mybatis，同时扫描了dao层的接口，将xml的mapper和dao接口的mapper接口类进行一一映射处理
         -->
    <bean id="mapperScanner"
          class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 扫描com.yuw.dao这个包以及它的子包下的所有映射接口类 -->
        <property name="basePackage" value="com.yuw.dao"/>
        <property name="sqlSessionFactoryBeanName"
                  value="sqlSessionFactory"/>
    </bean>

    <!-- 注解方式配置事务：在使用事务处理的方法上添加注解 @Transactional 即可 -->
    <tx:annotation-driven
            transaction-manager="transactionManager"/>
</beans>